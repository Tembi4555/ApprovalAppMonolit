@model List<TicketViewModel>
@{
    ViewData["Title"] = "Home Page";
    string personIdString = Context.User.FindFirst("PersonId")?.Value;
    long.TryParse(personIdString, out long result);

    long personId = result;
    string hubUrl = $"{Context.Request.Scheme}://{Context.Request.Host}/channel";
}
<div class="container">
    <ul class="nav nav-tabs" id="myTab" role="tablist">
        <li class="nav-item" role="presentation">
            <a class="nav-link active" aria-current="page" id="incoming-tab" data-bs-toggle="tab" href="#incoming" role="tab" aria-controls="incoming" aria-selected="true">Входящие задачи</a>
        </li>
        <li class="nav-item" role="presentation">
            <a class="nav-link" id="outgoing-tab" data-bs-toggle="tab" href="#outgoing" role="tab" aria-controls="outgoing" aria-selected="false">Исходящие задачи</a>
        </li>
        <li class="nav-item">
            <a class="btn btn-primary" id="btn-create-task" href="@Url.Action("Create","Home")" type="button" aria-selected="false"><i class="fa-solid fa-plus"></i> Создать задачу</a>
        </li>
    </ul>
    <hr />
    <div class="tab-content">
        <div class="tab-pane active" id="incoming">
            <table id="incoming-table"
                   data-page-size="20"
                   data-page-list="[20,50,100]"
                   data-search="true"
                   data-show-refresh="true"
                   data-filter-control="true"
                   data-buttons-class="primary"
                   data-cache="false"
                   data-pagination="true">
                <thead>
                    <tr>
                        <th data-field="id" data-sortable="true">ИД</th>
                        <th data-field="title">Тема</th>
                        <th data-field="description">Описание</th>
                        <th data-field="deadline" data-sortable="true">Срок</th>
                        <th data-field="createDate" data-sortable="true">Дата создания</th>
                        @if (true)
                        {
                            <th data-formatter="formatterIncomming" data-events="operateEvents" data-align="center" data-valign="middle"></th>
                        }
                    </tr>
                </thead>
            </table>
        </div>
        <div class="tab-pane" id="outgoing">
            <table id="outgoing-table"
                   data-page-size="20"
                   data-page-list="[20,50,100]"
                   data-search="true"
                   data-show-refresh="true"
                   data-filter-control="true"
                   data-buttons-class="primary"
                   data-cache="false"
                   data-pagination="true">
                <thead>
                    <tr>
                        <th data-field="id" data-sortable="true">№</th>
                        <th data-field="title">Тема</th>
                        <th data-field="description">Описание</th>
                        <th data-field="deadline" data-sortable="true">Срок</th>
                        <th data-field="createDate" data-sortable="true">Дата создания</th>
                        @if (true)
                        {
                            <th data-formatter="formatterOutgoing" data-events="operateEvents" data-align="center" data-valign="middle"></th>
                        }
                    </tr>
                </thead>
            </table>
        </div>
    
    </div>
</div>

<div class="modal fade" id="modalForm" tabindex="-1" aria-labelledby="modalFormLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
            </div>
            <div class="modal-body">
                <!-- Здесь будет содержимое модального окна -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
                <button type="button" class="btn btn-primary" onclick="saveChangeStatus()">Сохранить изменения</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .error {
            color: red;
            font-size: 0.875em;
        }
    </style>
}

@section Scripts {

    <script>

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("@hubUrl")
            .withAutomaticReconnect()
            .build();

        connection.on("ReceiveMessage", function (personsIds, message) {
            if (personsIds.includes("@personIdString")) {
                Toastify({
                    text: message,
                    duration: 3000,  // Время в миллисекундах
                    close: true,     // Кнопка для закрытия
                    gravity: "top",  // Положение: top или bottom
                    position: "right", // Положение: left, center, right
                    backgroundColor: "linear-gradient(to right, #00b09b, #96c93d)"
                }).showToast();
                updateIncomingTable();
                updateOutgoingTable();
            }
            

        });

        connection.start()
            .then(() => {
                console.log("SignalR соединение установлено!");
            })
            .catch(error => {
                console.log("Ошибка при подключении:", error);
            });

        var $incomingTable = $('#incoming-table')
        var $outgoingTable = null

        window.operateEvents = {
            'click .btnUpdateTask': function (e, value, row, index) { showUpdateForm(row['id']) },
        };
        
         $(function () {
            createIncomingTable()

            $("#outgoing-tab").click(function () {
                if (!$outgoingTable){
                    createOutgoingTable();
                }
                else
                    updateOutgoingTable();
                    
            });

            $("#incoming-tab").click(function () {
                updateIncomingTable();
            });

            $incomingTable.on('refresh.bs.table',
                function (params) {
                    updateIncomingTable();
                });
             if ($outgoingTable) {
                $outgoingTable.on('refresh.bs.table',
                    function (params) {
                        updateOutgoingTable();
                    });
             }
            
            
        })

        function formatterIncomming(value, row, index) {
            return [
                '<a class="btnUpdateTask" href="javascript:void(0)" title="Просмотреть задачу">',
                'Просмотреть',
                '</a>  '
            ].join('');
        }

        function createIncomingTable(){
            $.ajax({
                url: '@Url.Action("GetIncoming", "Home")',
                method: 'post',
                dataType: 'html',
                data: { approvingId: @personId },
                success: function (data) {
                    var res = JSON.parse(data)
                    $incomingTable.bootstrapTable({ data: res });
                }
            });
        }

        function updateIncomingTable()
        {
            $.ajax({
                url: '@Url.Action("GetIncoming", "Home")',
                method: 'post',
                dataType: 'html',
                data: { approvingId: @personId },
                success: function (data) {
                    var res = JSON.parse(data)
                    $incomingTable.bootstrapTable( 'load', res );
                }
            });
        }

        function createOutgoingTable() {
            $outgoingTable = $('#outgoing-table')
            $.ajax({
                url: '@Url.Action("GetOutgoing", "Home")',
                method: 'post',
                dataType: 'html',
                data: { idAuthor: @personId },
                success: function (data) {
                    var res = JSON.parse(data)
                    $outgoingTable.bootstrapTable({ data: res });
                }
            });
        }

        function updateOutgoingTable() {
            if ($outgoingTable) {
                $.ajax({
                    url: '@Url.Action("GetOutgoing", "Home")',
                    method: 'post',
                    dataType: 'html',
                    data: { idAuthor: @personId },
                    success: function (data) {
                        var res = JSON.parse(data)
                        $outgoingTable.bootstrapTable('load', res);
                    }
                });
            }
            
        }

        function showUpdateForm(idTask) {
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetTicketView", "Home")/',
                cache: false,
                data: { idTicket: idTask, idApproving: "@personId" },
                success: function (data) {
                    $('#modalForm .modal-body').empty().append(data);
                    $('#modalForm').modal('show');
                },
                error(event, jqXHR, options) {
                    if (event.responseText && event.responseText.startsWith("Не удалось найти заявку")) {
                        Toastify({
                            text: event.responseText,
                            duration: 3000, 
                            close: true,     
                            gravity: "top",  
                            position: "right", 
                            backgroundColor: "red"
                        }).showToast();
                    }
                    else {
                        Toastify({
                            text: "Не пришел ответ от сервера",
                            duration: 3000,  
                            close: true,    
                            gravity: "top",  
                            position: "right", 
                            backgroundColor: "red"
                        }).showToast();
                    }
                    
                }
            });
        }

        function saveChangeStatus() {
            var formData = $("#updateTicketForm").serializeArray();

            var formValues = {};
            $.each(formData, function (index, element) {
                formValues[element.name] = element.value;
            });

            $(".error").text("");
            let isValid = true;

            var comment = formValues.comment
            var status = formValues.idStatus;
            var idTicket = formValues.Id;
            var personId = '@personIdString';
            // Проверка на обязательность полей
            if (comment === "") {
                $("#approvalCommentError").text("Заполнение отчета обязательно.");
                isValid = false;
            }
            if (!status) {
                $("#approvalStatusError").text("Вы не выбрали статус согласования задачи.");
                isValid = false;
            }
            if (!idTicket || !personId)
            {
                isValid = false;
                alert('Ошибка на форме');
            }

            if (!isValid) return false;

            $.ajax({
                url: '@Url.Action("ApprovingTicketTask", "Home")',
                method: 'PUT',
                dataType: 'html',
                data: { idTicket: idTicket, idApproving: @personId, idStatus: status, comment: comment },
                success: function (data) {
                    if (data === 'ok') {
                        $incomingTable.bootstrapTable('load', res);
                        Toastify({
                            text: "Задача выполнена.",
                            duration: 3000,  
                            close: true,     
                            gravity: "top",  
                            position: "right", 
                            backgroundColor: "linear-gradient(to right, #00b09b, #96c93d)"
                        }).showToast();
                    }

                },
                error(event, jqXHR, options) {
                    Toastify({
                        text: "Не пришел ответ от сервера",
                        duration: 3000,
                        close: true,
                        gravity: "top",
                        position: "right",
                        backgroundColor: "red"
                    }).showToast();
                }
            });
        }

        // Toastify({
        //     text: "Это уведомление!",
        //     duration: 3000,  // Время в миллисекундах
        //     close: true,     // Кнопка для закрытия
        //     gravity: "top",  // Положение: top или bottom
        //     position: "right", // Положение: left, center, right
        //     backgroundColor: "linear-gradient(to right, #00b09b, #96c93d)"
        // }).showToast();

    </script>
}
